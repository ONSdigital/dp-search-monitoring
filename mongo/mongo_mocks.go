// Code generated by moq; DO NOT EDIT
// github.com/matryer/moq

package mongo

import (
	"github.com/ONSdigital/dp-search-monitoring/analytics"
	"gopkg.in/mgo.v2"
	"sync"
)

var (
	lockMongoClientMockGetClient sync.RWMutex
	lockMongoClientMockInsert    sync.RWMutex
)

// MongoClientMock is a mock implementation of MongoClient.
//
//     func TestSomethingThatUsesMongoClient(t *testing.T) {
//
//         // make and configure a mocked MongoClient
//         mockedMongoClient := &MongoClientMock{
//             GetClientFunc: func() *mgo.Session {
// 	               panic("TODO: mock out the GetClient method")
//             },
//             InsertFunc: func(message *analytics.Message) error {
// 	               panic("TODO: mock out the Insert method")
//             },
//         }
//
//         // TODO: use mockedMongoClient in code that requires MongoClient
//         //       and then make assertions.
//
//     }
type MongoClientMock struct {
	// GetClientFunc mocks the GetClient method.
	GetClientFunc func() *mgo.Session

	// InsertFunc mocks the Insert method.
	InsertFunc func(message *analytics.Message) error

	// calls tracks calls to the methods.
	calls struct {
		// GetClient holds details about calls to the GetClient method.
		GetClient []struct {
		}
		// Insert holds details about calls to the Insert method.
		Insert []struct {
			// Message is the message argument value.
			Message *analytics.Message
		}
	}
}

// GetClient calls GetClientFunc.
func (mock *MongoClientMock) GetClient() *mgo.Session {
	if mock.GetClientFunc == nil {
		panic("moq: MongoClientMock.GetClientFunc is nil but MongoClient.GetClient was just called")
	}
	callInfo := struct {
	}{}
	lockMongoClientMockGetClient.Lock()
	mock.calls.GetClient = append(mock.calls.GetClient, callInfo)
	lockMongoClientMockGetClient.Unlock()
	return mock.GetClientFunc()
}

// GetClientCalls gets all the calls that were made to GetClient.
// Check the length with:
//     len(mockedMongoClient.GetClientCalls())
func (mock *MongoClientMock) GetClientCalls() []struct {
} {
	var calls []struct {
	}
	lockMongoClientMockGetClient.RLock()
	calls = mock.calls.GetClient
	lockMongoClientMockGetClient.RUnlock()
	return calls
}

// Insert calls InsertFunc.
func (mock *MongoClientMock) Insert(message *analytics.Message) error {
	if mock.InsertFunc == nil {
		panic("moq: MongoClientMock.InsertFunc is nil but MongoClient.Insert was just called")
	}
	callInfo := struct {
		Message *analytics.Message
	}{
		Message: message,
	}
	lockMongoClientMockInsert.Lock()
	mock.calls.Insert = append(mock.calls.Insert, callInfo)
	lockMongoClientMockInsert.Unlock()
	return mock.InsertFunc(message)
}

// InsertCalls gets all the calls that were made to Insert.
// Check the length with:
//     len(mockedMongoClient.InsertCalls())
func (mock *MongoClientMock) InsertCalls() []struct {
	Message *analytics.Message
} {
	var calls []struct {
		Message *analytics.Message
	}
	lockMongoClientMockInsert.RLock()
	calls = mock.calls.Insert
	lockMongoClientMockInsert.RUnlock()
	return calls
}
