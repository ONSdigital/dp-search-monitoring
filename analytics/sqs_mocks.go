// Code generated by moq; DO NOT EDIT
// github.com/matryer/moq

package analytics

import (
	"github.com/aws/aws-sdk-go-v2/service/sqs"
	"sync"
)

var (
	lockSQSReaderMockBatchDeleteMessages sync.RWMutex
	lockSQSReaderMockDeleteMessage       sync.RWMutex
	lockSQSReaderMockGetAttributes       sync.RWMutex
	lockSQSReaderMockGetMessages         sync.RWMutex
)

// SQSReaderMock is a mock implementation of SQSReader.
//
//     func TestSomethingThatUsesSQSReader(t *testing.T) {
//
//         // make and configure a mocked SQSReader
//         mockedSQSReader := &SQSReaderMock{
//             BatchDeleteMessagesFunc: func(receiptHandles []string) (*sqs.DeleteMessageBatchOutput, error) {
// 	               panic("TODO: mock out the BatchDeleteMessages method")
//             },
//             DeleteMessageFunc: func(receiptHandle string) (*sqs.DeleteMessageOutput, error) {
// 	               panic("TODO: mock out the DeleteMessage method")
//             },
//             GetAttributesFunc: func() (*sqs.GetQueueAttributesOutput, error) {
// 	               panic("TODO: mock out the GetAttributes method")
//             },
//             GetMessagesFunc: func(waitTimeout int64, maxNumberOfMessages int64) ([]Message, error) {
// 	               panic("TODO: mock out the GetMessages method")
//             },
//         }
//
//         // TODO: use mockedSQSReader in code that requires SQSReader
//         //       and then make assertions.
//
//     }
type SQSReaderMock struct {
	// BatchDeleteMessagesFunc mocks the BatchDeleteMessages method.
	BatchDeleteMessagesFunc func(receiptHandles []string) (*sqs.DeleteMessageBatchOutput, error)

	// DeleteMessageFunc mocks the DeleteMessage method.
	DeleteMessageFunc func(receiptHandle string) (*sqs.DeleteMessageOutput, error)

	// GetAttributesFunc mocks the GetAttributes method.
	GetAttributesFunc func() (*sqs.GetQueueAttributesOutput, error)

	// GetMessagesFunc mocks the GetMessages method.
	GetMessagesFunc func(waitTimeout int64, maxNumberOfMessages int64) ([]Message, error)

	// calls tracks calls to the methods.
	calls struct {
		// BatchDeleteMessages holds details about calls to the BatchDeleteMessages method.
		BatchDeleteMessages []struct {
			// ReceiptHandles is the receiptHandles argument value.
			ReceiptHandles []string
		}
		// DeleteMessage holds details about calls to the DeleteMessage method.
		DeleteMessage []struct {
			// ReceiptHandle is the receiptHandle argument value.
			ReceiptHandle string
		}
		// GetAttributes holds details about calls to the GetAttributes method.
		GetAttributes []struct {
		}
		// GetMessages holds details about calls to the GetMessages method.
		GetMessages []struct {
			// WaitTimeout is the waitTimeout argument value.
			WaitTimeout int64
			// MaxNumberOfMessages is the maxNumberOfMessages argument value.
			MaxNumberOfMessages int64
		}
	}
}

// BatchDeleteMessages calls BatchDeleteMessagesFunc.
func (mock *SQSReaderMock) BatchDeleteMessages(receiptHandles []string) (*sqs.DeleteMessageBatchOutput, error) {
	if mock.BatchDeleteMessagesFunc == nil {
		panic("moq: SQSReaderMock.BatchDeleteMessagesFunc is nil but SQSReader.BatchDeleteMessages was just called")
	}
	callInfo := struct {
		ReceiptHandles []string
	}{
		ReceiptHandles: receiptHandles,
	}
	lockSQSReaderMockBatchDeleteMessages.Lock()
	mock.calls.BatchDeleteMessages = append(mock.calls.BatchDeleteMessages, callInfo)
	lockSQSReaderMockBatchDeleteMessages.Unlock()
	return mock.BatchDeleteMessagesFunc(receiptHandles)
}

// BatchDeleteMessagesCalls gets all the calls that were made to BatchDeleteMessages.
// Check the length with:
//     len(mockedSQSReader.BatchDeleteMessagesCalls())
func (mock *SQSReaderMock) BatchDeleteMessagesCalls() []struct {
	ReceiptHandles []string
} {
	var calls []struct {
		ReceiptHandles []string
	}
	lockSQSReaderMockBatchDeleteMessages.RLock()
	calls = mock.calls.BatchDeleteMessages
	lockSQSReaderMockBatchDeleteMessages.RUnlock()
	return calls
}

// DeleteMessage calls DeleteMessageFunc.
func (mock *SQSReaderMock) DeleteMessage(receiptHandle string) (*sqs.DeleteMessageOutput, error) {
	if mock.DeleteMessageFunc == nil {
		panic("moq: SQSReaderMock.DeleteMessageFunc is nil but SQSReader.DeleteMessage was just called")
	}
	callInfo := struct {
		ReceiptHandle string
	}{
		ReceiptHandle: receiptHandle,
	}
	lockSQSReaderMockDeleteMessage.Lock()
	mock.calls.DeleteMessage = append(mock.calls.DeleteMessage, callInfo)
	lockSQSReaderMockDeleteMessage.Unlock()
	return mock.DeleteMessageFunc(receiptHandle)
}

// DeleteMessageCalls gets all the calls that were made to DeleteMessage.
// Check the length with:
//     len(mockedSQSReader.DeleteMessageCalls())
func (mock *SQSReaderMock) DeleteMessageCalls() []struct {
	ReceiptHandle string
} {
	var calls []struct {
		ReceiptHandle string
	}
	lockSQSReaderMockDeleteMessage.RLock()
	calls = mock.calls.DeleteMessage
	lockSQSReaderMockDeleteMessage.RUnlock()
	return calls
}

// GetAttributes calls GetAttributesFunc.
func (mock *SQSReaderMock) GetAttributes() (*sqs.GetQueueAttributesOutput, error) {
	if mock.GetAttributesFunc == nil {
		panic("moq: SQSReaderMock.GetAttributesFunc is nil but SQSReader.GetAttributes was just called")
	}
	callInfo := struct {
	}{}
	lockSQSReaderMockGetAttributes.Lock()
	mock.calls.GetAttributes = append(mock.calls.GetAttributes, callInfo)
	lockSQSReaderMockGetAttributes.Unlock()
	return mock.GetAttributesFunc()
}

// GetAttributesCalls gets all the calls that were made to GetAttributes.
// Check the length with:
//     len(mockedSQSReader.GetAttributesCalls())
func (mock *SQSReaderMock) GetAttributesCalls() []struct {
} {
	var calls []struct {
	}
	lockSQSReaderMockGetAttributes.RLock()
	calls = mock.calls.GetAttributes
	lockSQSReaderMockGetAttributes.RUnlock()
	return calls
}

// GetMessages calls GetMessagesFunc.
func (mock *SQSReaderMock) GetMessages(waitTimeout int64, maxNumberOfMessages int64) ([]Message, error) {
	if mock.GetMessagesFunc == nil {
		panic("moq: SQSReaderMock.GetMessagesFunc is nil but SQSReader.GetMessages was just called")
	}
	callInfo := struct {
		WaitTimeout         int64
		MaxNumberOfMessages int64
	}{
		WaitTimeout:         waitTimeout,
		MaxNumberOfMessages: maxNumberOfMessages,
	}
	lockSQSReaderMockGetMessages.Lock()
	mock.calls.GetMessages = append(mock.calls.GetMessages, callInfo)
	lockSQSReaderMockGetMessages.Unlock()
	return mock.GetMessagesFunc(waitTimeout, maxNumberOfMessages)
}

// GetMessagesCalls gets all the calls that were made to GetMessages.
// Check the length with:
//     len(mockedSQSReader.GetMessagesCalls())
func (mock *SQSReaderMock) GetMessagesCalls() []struct {
	WaitTimeout         int64
	MaxNumberOfMessages int64
} {
	var calls []struct {
		WaitTimeout         int64
		MaxNumberOfMessages int64
	}
	lockSQSReaderMockGetMessages.RLock()
	calls = mock.calls.GetMessages
	lockSQSReaderMockGetMessages.RUnlock()
	return calls
}
